{
	"info": {
		"_postman_id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
		"name": "Movie Watch List API",
		"description": "Postman collection for testing Movie Watch List API endpoints",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get All Movies",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is JSON array\", function () {",
							"    pm.response.to.be.json;",
							"    pm.expect(pm.response.json()).to.be.an('array');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{base_url}}/movies",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"movies"
					]
				},
				"description": "Retrieve all movies from the database"
			},
			"response": []
		},
		{
			"name": "Get Upcoming Movies",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is JSON array\", function () {",
							"    pm.response.to.be.json;",
							"    pm.expect(pm.response.json()).to.be.an('array');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{base_url}}/movies/upcoming",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"movies",
						"upcoming"
					]
				},
				"description": "Retrieve all upcoming movies (release timestamp > current time)"
			},
			"response": []
		},
		{
			"name": "Get Watched Movies",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is JSON array\", function () {",
							"    pm.response.to.be.json;",
							"    pm.expect(pm.response.json()).to.be.an('array');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{base_url}}/movies/watched",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"movies",
						"watched"
					]
				},
				"description": "Retrieve all watched movies (watched = 1)"
			},
			"response": []
		},
		{
			"name": "Create New Movie",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains success message\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.property('status', 200);",
							"    pm.expect(responseJson).to.have.property('message');",
							"    pm.expect(responseJson.message).to.include('success');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"The Matrix\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/movies",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"movies"
					]
				},
				"description": "Create a new movie in the watch list"
			},
			"response": []
		},
		{
			"name": "Create New Movie (Upcoming)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains success message\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.property('status', 200);",
							"    pm.expect(responseJson).to.have.property('message');",
							"    pm.expect(responseJson.message).to.include('success');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"Dune: Part Three\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/movies",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"movies"
					]
				},
				"description": "Create a new upcoming movie in the watch list"
			},
			"response": []
		},
		{
			"name": "Mark Movie as Watched",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains success message\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.property('status', 200);",
							"    pm.expect(responseJson).to.have.property('message');",
							"    pm.expect(responseJson.message).to.include('success');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{base_url}}/movies/The Matrix?should_update=true",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"movies",
						"The Matrix"
					],
					"query": [
						{
							"key": "should_update",
							"value": "true"
						}
					]
				},
				"description": "Mark a movie as watched by setting should_update=true"
			},
			"response": []
		},
		{
			"name": "Mark Movie as Unwatched",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains success message\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.property('status', 200);",
							"    pm.expect(responseJson).to.have.property('message');",
							"    pm.expect(responseJson.message).to.include('success');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{base_url}}/movies/The Matrix?should_update=false",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"movies",
						"The Matrix"
					],
					"query": [
						{
							"key": "should_update",
							"value": "false"
						}
					]
				},
				"description": "Mark a movie as unwatched by setting should_update=false"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8080",
			"type": "string"
		}
	]
}
