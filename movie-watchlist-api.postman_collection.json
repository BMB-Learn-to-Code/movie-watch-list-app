{
  "info": {
    "_postman_id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
    "name": "Movie Watch List API",
    "description": "Postman collection for testing Movie Watch List API endpoints",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Get All Movies",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response is JSON array\", function () {",
              "    pm.response.to.be.json;",
              "    pm.expect(pm.response.json()).to.be.an('array');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{base_url}}/movies",
          "host": ["{{base_url}}"],
          "path": ["movies"]
        },
        "description": "Retrieve all movies from the database"
      },
      "response": []
    },
    {
      "name": "Get Upcoming Movies",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response is JSON array\", function () {",
              "    pm.response.to.be.json;",
              "    pm.expect(pm.response.json()).to.be.an('array');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{base_url}}/movies/upcoming",
          "host": ["{{base_url}}"],
          "path": ["movies", "upcoming"]
        },
        "description": "Retrieve all upcoming movies (release timestamp > current time)"
      },
      "response": []
    },
    {
      "name": "Get Watched Movies",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response is JSON array\", function () {",
              "    pm.response.to.be.json;",
              "    pm.expect(pm.response.json()).to.be.an('array');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"user_name\": \"{{user_name}}\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/movies/watched",
          "host": ["{{base_url}}"],
          "path": ["movies", "watched"]
        },
        "description": "Retrieve watched movies for a specific user. Requires JSON body with user_name."
      },
      "response": []
    },
    {
      "name": "Create New Movie",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response contains success message\", function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('status', 200);",
              "    pm.expect(responseJson).to.have.property('message');",
              "    pm.expect(responseJson.message).to.eql('Movie created with success.');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"title\": \"The Matrix\",\n  \"release_date\": \"31-03-1999\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/movies",
          "host": ["{{base_url}}"],
          "path": ["movies"]
        },
        "description": "Create a new movie in the watch list. Date format: dd-mm-yyyy"
      },
      "response": []
    },
    {
      "name": "Create New Movie (Upcoming)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response contains success message\", function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('status', 200);",
              "    pm.expect(responseJson).to.have.property('message');",
              "    pm.expect(responseJson.message).to.eql('Movie created with success.');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"title\": \"Dune: Part Three\",\n  \"release_date\": \"01-12-2026\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/movies",
          "host": ["{{base_url}}"],
          "path": ["movies"]
        },
        "description": "Create a new upcoming movie in the watch list. Date format: dd-mm-yyyy"
      },
      "response": []
    },
    {
      "name": "Mark Movie as Watched",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response contains success message\", function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('status', 200);",
              "    pm.expect(responseJson).to.have.property('message');",
              "    pm.expect(responseJson.message).to.eql('Movie Updated with success.');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"user_name\": \"{{user_name}}\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/movies/{{movie_id}}/watch",
          "host": ["{{base_url}}"],
          "path": ["movies", "{{movie_id}}", "watch"]
        },
        "description": "Mark a movie as watched for a user. Requires JSON body with user_name."
      },
      "response": []
    },
    {
      "name": "Unwatch Movie",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response contains success message\", function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('status', 200);",
              "    pm.expect(responseJson).to.have.property('message');",
              "    pm.expect(responseJson.message).to.eql('Movie Updated with success.');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"user_name\": \"{{user_name}}\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/movies/{{movie_id}}/unwatch",
          "host": ["{{base_url}}"],
          "path": ["movies", "{{movie_id}}", "unwatch"]
        },
        "description": "Remove a movie from a user's watched list. Requires JSON body with user_name."
      },
      "response": []
    },
    {
      "name": "Delete Movie",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response contains success message\", function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('status', 200);",
              "    pm.expect(responseJson).to.have.property('message');",
              "    pm.expect(responseJson.message).to.eql('Movie Deleted with success.');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{base_url}}/movies/{{movie_id}}",
          "host": ["{{base_url}}"],
          "path": ["movies", "{{movie_id}}"]
        },
        "description": "Delete a movie from the watch list by id"
      },
      "response": []
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "const ensureVar = (key, fallback) => {",
          "  const current = pm.collectionVariables.get(key);",
          "  if (current === undefined || current === null || current === \"\") {",
          "    pm.collectionVariables.set(key, fallback);",
          "  }",
          "};",
          "",
          "ensureVar(\"base_url\", \"http://localhost:8080\");",
          "ensureVar(\"user_name\", \"demo\");",
          "ensureVar(\"movie_id\", \"1\");"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8080",
      "type": "string",
      "description": "Base URL for the Movie Watch List API"
    },
    {
      "key": "user_name",
      "value": "demo",
      "type": "string",
      "description": "Demo user name for watched endpoints"
    },
    {
      "key": "movie_id",
      "value": "1",
      "type": "string",
      "description": "Sample movie id used in path params"
    }
  ]
}
