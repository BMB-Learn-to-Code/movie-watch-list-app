{
  "info": {
    "_postman_id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
    "name": "Movie Watch List API",
    "description": "Postman collection for testing Movie Watch List API endpoints",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Get All Movies",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response is JSON array\", function () {",
              "    pm.response.to.be.json;",
              "    pm.expect(pm.response.json()).to.be.an('array');",
              "});",
              "",
              "pm.test(\"Each movie has required fields\", function () {",
              "    const movies = pm.response.json();",
              "    if (movies.length > 0) {",
              "        movies.forEach(movie => {",
              "            pm.expect(movie).to.be.an('array');",
              "            pm.expect(movie).to.have.lengthOf(3);",
              "        });",
              "    }",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{base_url}}/movies",
          "host": ["{{base_url}}"],
          "path": ["movies"]
        },
        "description": "Retrieve all movies from the database"
      },
      "response": []
    },
    {
      "name": "Get Upcoming Movies",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response is JSON array\", function () {",
              "    pm.response.to.be.json;",
              "    pm.expect(pm.response.json()).to.be.an('array');",
              "});",
              "",
              "pm.test(\"All movies have future release dates\", function () {",
              "    const movies = pm.response.json();",
              "    const currentTime = Date.now() / 1000;",
              "    movies.forEach(movie => {",
              "        if (movie.length >= 2) {",
              "            pm.expect(movie[1]).to.be.greaterThan(currentTime);",
              "        }",
              "    });",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{base_url}}/movies/upcoming",
          "host": ["{{base_url}}"],
          "path": ["movies", "upcoming"]
        },
        "description": "Retrieve all upcoming movies (release timestamp > current time)"
      },
      "response": []
    },
    {
      "name": "Get Watched Movies",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response is JSON array\", function () {",
              "    pm.response.to.be.json;",
              "    pm.expect(pm.response.json()).to.be.an('array');",
              "});",
              "",
              "pm.test(\"All movies are marked as watched\", function () {",
              "    const movies = pm.response.json();",
              "    movies.forEach(movie => {",
              "        if (movie.length >= 3) {",
              "            pm.expect(movie[2]).to.equal(1);",
              "        }",
              "    });",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{base_url}}/movies/watched",
          "host": ["{{base_url}}"],
          "path": ["movies", "watched"]
        },
        "description": "Retrieve all watched movies (watched = 1)"
      },
      "response": []
    },
    {
      "name": "Create New Movie",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response contains success message\", function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('status', 200);",
              "    pm.expect(responseJson).to.have.property('message');",
              "    pm.expect(responseJson.message).to.include('success');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"title\": \"The Matrix\",\n    \"release_date\": \"31-03-1999\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/movies",
          "host": ["{{base_url}}"],
          "path": ["movies"]
        },
        "description": "Create a new movie in the watch list. Date format: dd-mm-yyyy"
      },
      "response": []
    },
    {
      "name": "Create New Movie (Upcoming)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response contains success message\", function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('status', 200);",
              "    pm.expect(responseJson).to.have.property('message');",
              "    pm.expect(responseJson.message).to.include('success');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"title\": \"Dune: Part Three\",\n    \"release_date\": \"01-12-2026\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/movies",
          "host": ["{{base_url}}"],
          "path": ["movies"]
        },
        "description": "Create a new upcoming movie in the watch list. Date format: dd-mm-yyyy"
      },
      "response": []
    },
    {
      "name": "Mark Movie as Watched",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response contains success message\", function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('status', 200);",
              "    pm.expect(responseJson).to.have.property('message');",
              "    pm.expect(responseJson.message).to.include('success');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PUT",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{base_url}}/movies/The Matrix?watched=1",
          "host": ["{{base_url}}"],
          "path": ["movies", "The Matrix"],
          "query": [
            {
              "key": "watched",
              "value": "1",
              "description": "Set to 1 to mark as watched"
            }
          ]
        },
        "description": "Mark a movie as watched by setting watched=1. Only works for movies with past release dates."
      },
      "response": []
    },
    {
      "name": "Mark Movie as Unwatched",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response contains success message\", function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('status', 200);",
              "    pm.expect(responseJson).to.have.property('message');",
              "    pm.expect(responseJson.message).to.include('success');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PUT",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{base_url}}/movies/The Matrix?watched=0",
          "host": ["{{base_url}}"],
          "path": ["movies", "The Matrix"],
          "query": [
            {
              "key": "watched",
              "value": "0",
              "description": "Set to 0 to mark as unwatched"
            }
          ]
        },
        "description": "Mark a movie as unwatched by setting watched=0"
      },
      "response": []
    },
    {
      "name": "Delete Movie",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response contains success message\", function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('status', 200);",
              "    pm.expect(responseJson).to.have.property('message');",
              "    pm.expect(responseJson.message).to.include('success');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{base_url}}/movies/The Matrix",
          "host": ["{{base_url}}"],
          "path": ["movies", "The Matrix"]
        },
        "description": "Delete a movie from the watch list by title"
      },
      "response": []
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8080",
      "type": "string",
      "description": "Base URL for the Movie Watch List API"
    }
  ]
}
